@emph{OctApps} provides both general-purpose functions which may be useful for writing Octave programs, and functions specialised to research into continuous gravitational waves.
The tutorials in this chapter illustrate several important general-purpose and research-specific functions.

@menu
* General-Purpose Functions:: Tutorials on some general-purpose @emph{OctApps} functions.
* Continuous-Wave Functions:: Tutorials on some @emph{OctApps} functions specific to continuous gravitational-wave research.
@end menu

@node General-Purpose Functions
@section General-Purpose Functions

The tutorials in this section illustrate some general-purpose functions provided by @emph{OctApps}.

@menu
* @command{parseOptions()}::  Tutorial on @command{parseOptions()}, a general-purpose function argument parser.
* @code{Hist}::               Tutorial on @code{Hist}, a Octave class representing a multi-dimensional histogram.
@end menu

@node @command{parseOptions()}
@subsection @command{parseOptions()}

@command{parseOptions()} is a general-purpose argument parser for Octave functions.
It provides parsing of keyword-value arguments as well as powerful type-checking of argument values.
Together with @command{octapps_run}, a Unix shell script, Octave functions written using @command{parseOptions} may be called directly from the Unix command line with no additional changes.

Consider the following simple function:
@example
function function1(varargin)

  parseOptions(varargin,
               @{"message", "char"@},
               []);

  printf("%s\n", message);

endfunction
@end example
This defines a function called @command{function1()}, whose arguments are parsed by @command{parseOptions()}.
The first argument to @command{parseOptions()} are the arguments passed to @command{function1()}, which are contained in the cell array @var{varargin}.
The second and subsequent@footnote{
The last argument to @command{parseOptions}, @code{[]}, is a convenience to allow the closing bracket of @command{parseOptions} to be on its own line, and to allow each @code{@{ @dots{} @}} specification to end with a comma to facilitate easy addition/removal/reordering of specifications.
} arguments to @command{parseOptions()} define specifications which define which arguments are accepted by @command{parseOptions()}.
Each specification is given by a cell array @code{@{ @dots{} @}} with at least two arguments: the first argument is the keyword given to the argument, and the second argument defines the allowed type of the argument.

In this example, @command{function1()} takes a single keyword argument, @var{message}, whose value must satisfy the type specification @samp{char}.
The type specifications generally map naturally to Octave functions which test for various types: a type specification @samp{<type>} calls the Octave function @code{is<type>()} on the argument value, which must return @samp{true} for the argument value to be accepted.
In this case, the type specification @samp{char} calls the Octave function @code{ischar()}, which returns @samp{true} only if the argument value is a @emph{string}.

The function @command{function1()} is called from within Octave like this:
@example
octave> function1("message", "Hello world!")
Hello world!
@end example

Incorrect calls to @command{function1()} are handled with error messages:
@example
octave> function1
error: parseOptions: missing required option 'message'
error: called from
    parseOptions at line 409 column 9
    function1 at line 3 column 3

octave> function1("message")
error: parseOptions: expected 'key',value pairs following regular options in args
error: called from
    parseOptions at line 329 column 5
    function1 at line 3 column 3

octave> function1("message", 1.23)
error: parseOptions: value of 'message' must satisfy ( ischar(x) )
error: called from
    parseOptions at line 379 column 11
    function1 at line 3 column 3
@end example

The function @command{function1()} can also be called directly from the Unix command line, using the script @command{octapps_run} installed by @emph{OctApps}, like this:
@example
$ source octapps-user-env.sh

$ octapps_run function1 --message "Hello world!"
Hello world!
@end example
The @code{"keyword", value} syntax used to call @command{function1()} from within Octave translates straightforwardly into the usual @code{--keyword value} or @code{--keyword=value} syntax used by Unix command-line programs.

Now consider a more complicated example:
@example
function function2(varargin)

  parseOptions(varargin,
               @{"message", "char"@},
               @{"count", "integer,strictpos,scalar"@},
               @{"offset", "integer,scalar", 0@},
               @{"scale", "real,positive,scalar", 2.34@},
               @{"direction", "column,rows:2", [1.3; 5.7]@},
               @{"transform", "matrix,cols:2", eye(2)@},
               []);

  printf("%s\n", message);
  printf("count = %i, count + offset = %i, count * scale = %g\n", count, count + offset, count * scale);
  printf("direction = [%g; %g], transform * direction = [%g; %g]\n", direction, transform * direction);

endfunction
@end example
This example introduces some new features of @command{parseOptions()}:
@itemize

@item
@command{parseOptions()} includes many builtin type specifications:
@table @samp

@item bool
@itemx logical
Argument value must be a Boolean/logical value, i.e. @code{true} or @code{false} or @code{1} or @code{0}.

@item cell
Argument value must a cell array.

@item function
Argument value must be a function handle.

@item complex
Argument value must be numeric and complex-valued.

@item real
Argument value must be numeric and real-values.

@item integer
Argument value must be numeric and integer-valued.

@item evenint
Argument value must be numeric and an even integer.

@item oddint
Argument value must be numeric and an odd integer.

@item nonzero
Argument value must be numeric and non-zero.

@item positive
Argument value must be numeric and either zero or positively valued.

@item negative
Argument value must be numeric and either zero or negatively valued.

@item strictpos
Argument value must be numeric and strictly positive.

@item strictneg
Argument value must be numeric and strictly negative.

@item unit
Argument value must be numeric and between 0 and 1 (including 0 and 1).

@item strictunit
Argument value must be numeric and strictly between 0 and 1 (i.e. not including 0 and 1).

@item a:<class>
Argument value must be an instance of the Octave class @samp{<class>}, as determined by the Octave function @command{isa()}.

@item acell:<class>
Argument value must be a cell array whose members are instances of the Octave class @samp{<class>}, as determined by the Octave function @command{isa()}.

@item size:<size>
The size of the argument value must match @samp{<size>}.

@item numel:<n>
The number of elements of the argument value must match @samp{<n>}.

@item rows:<n>
The number of rows of the argument value must match @samp{<n>}.

@item cols:<n>
The number of columns of the argument value must match @samp{<n>}.

@end table

@item
Type specifications can take several requirements separated by commas.

@item
Argument specifications can include a third argument which gives a default value for the function argument.

@end itemize

Returning to the example @command{function2()}, the argument specifications are therefore interpreted as follows:
@table @var

@item message
Argument value must be a string.

@item count
Argument value must be a strictly-positive integer scalar.

@item offset
Argument value must be a integer scalar; default value is @samp{0}.

@item scale
Argument value must be a positive real scalar; default value is @samp{2.34}.

@item direction
Argument value must be a column vector with 2 rows; default value is @samp{[1.3; 5.7]}.

@item transform
Argument value must be a matrix with 2 columns: default value is @code{eye(2)}, i.e. the 2-by-2 identity matrix.

@item

@end table

The function @command{function2()} is called from within Octave like this:
@example
octave> function2("message", "Hello world!", "count", 3)
Hello world!
count = 3, count + offset = 3, count * scale = 7.02
direction = [1.3; 5.7], transform * direction = [1.3; 5.7]

octave> function2("message", "Hello world!", "count", 3, "offset", -7)
Hello world!
count = 3, count + offset = -4, count * scale = 7.02
direction = [1.3; 5.7], transform * direction = [1.3; 5.7]

octave> function2("message", "Hello world!", "count", 3, "scale", 0.35)
Hello world!
count = 3, count + offset = 3, count * scale = 1.05
direction = [1.3; 5.7], transform * direction = [1.3; 5.7]

octave> function2("message", "Hello world!", "count", 3, "transform", [1,2;3,4])
Hello world!
count = 3, count + offset = 3, count * scale = 7.02
direction = [1.3; 5.7], transform * direction = [12.7; 26.7]
@end example

or from the Unix command line using @command{octapps_run} like this:
@example
$ source octapps-user-env.sh

$ octapps_run function2 --message "Hello world!" --count=3
Hello world!
count = 3, count + offset = 3, count * scale = 7.02
direction = [1.3; 5.7], transform * direction = [1.3; 5.7]

$ octapps_run function2 --message "Hello world!" --count=3 --offset=-7
Hello world!
count = 3, count + offset = -4, count * scale = 7.02
direction = [1.3; 5.7], transform * direction = [1.3; 5.7]

$ octapps_run function2 --message "Hello world!" --count=3 --scale 0.35
Hello world!
count = 3, count + offset = 3, count * scale = 1.05
direction = [1.3; 5.7], transform * direction = [1.3; 5.7]

$ octapps_run function2 --message "Hello world!" --count=3 --transform '[1,2;3,4]'
Hello world!
count = 3, count + offset = 3, count * scale = 7.02
direction = [1.3; 5.7], transform * direction = [12.7; 26.7]
@end example

@node @code{Hist}
@subsection @code{Hist}

@code{Hist} is a Octave class which represents a multi-dimensional histogram.
It is useful for accumulating data of a statistical nature and determining its properties.

A one-dimensional histogram is created with the following command:
@example
octave> hgrm = Hist(1, @{"lin", "dbin", 0.01@})
hgrm = @{histogram: count=0, range=[NaN,NaN]@}
@end example
This histogram will store data in bins with linear boundaries of width 0.01.
The @code{Hist} class can also store data in bins with logarithmic boundaries:
@example
octave> Hist(1, @{"log", "minrange", 0.02, "binsper10", 20@})
ans = @{histogram: count=0, range=[NaN,NaN]@}
@end example

To add data to a histogram, use the @command{addDataToHist()} function.
Let's add some Gaussian-distributed data:
@example
octave> hgrm = addDataToHist(hgrm, normrnd(10.7, 3.42, [1e4, 1]))
hgrm = @{histogram: count=10000, range=[-1.44,22.8]@}
@end example
We can call @command{addDataToHist()} many time to add more data to the histogram:
@example
octave> hgrm = addDataToHist(hgrm, normrnd(10.7, 3.42, [1e4, 1]))
hgrm = @{histogram: count=20000, range=[-1.86,24.05]@}
octave> hgrm = addDataToHist(hgrm, normrnd(10.7, 3.42, [1e4, 1]))
hgrm = @{histogram: count=30000, range=[-2.05,24.05]@}
octave> hgrm = addDataToHist(hgrm, normrnd(10.7, 3.42, [1e4, 1]))
hgrm = @{histogram: count=40000, range=[-2.42,24.05]@}
octave> hgrm = addDataToHist(hgrm, normrnd(10.7, 3.42, [1e4, 1]))
hgrm = @{histogram: count=50000, range=[-2.42,24.05]@}
@end example

We can now compute some basic statistical properties of the data, e.g.:
@itemize

@item
mean:
@example
octave> meanOfHist(hgrm)
ans =  10.730
@end example

@item
standard deviation:
@example
octave> stdvOfHist(hgrm)
ans =  3.3879
@end example

@item
cumulative distribution:
@example
octave> arrayfun(@@(x) cumulativeDistOfHist(hgrm, x), meanOfHist(hgrm) + (-2:2)*stdvOfHist(hgrm))
ans =

   0.023173   0.157702   0.501401   0.841628   0.977569

@end example

@item
quantile function:
@example
octave> arrayfun(@@(p) quantileFuncOfHist(hgrm, p), 0.5 + 0.5*[-0.95, -0.68, 0, 0.68, 0.95])
ans =

    4.0630    7.3755   10.7183   14.0960   17.3700

octave> (ans - meanOfHist(hgrm)) / stdvOfHist(hgrm)
ans =

  -1.9679992  -0.9902454  -0.0035522   0.9934369   1.9598407

@end example

@end itemize

The histogram can also be plotted:
@example
octave> graphics_toolkit gnuplot
octave> plotHist(hgrm, "b");
ezprint("Hist-plot-1.png", "width", 180, "fontsize", 6);
@end example
@image{Hist-plot-1}

The bin size can be changed by resampling the histogram to a coarser bin size:
@example
octave> plotHist(resampleHist(hgrm, -5:0.2:25), "r");
octave> ezprint("Hist-plot-2.png", "width", 180, "fontsize", 6);
@end example
@image{Hist-plot-2}

Histograms can be transformed by an arbitrary function.
Here we plot the histogram of the squares of the samples:
@example
octave> plotHist(resampleHist(transformHist(hgrm, @@(x) x.^2), -10:10:650), "k");
octave> ezprint("Hist-plot-3.png", "width", 180, "fontsize", 6);
@end example
@image{Hist-plot-3}

Further histogram functions are documented in the @ref{@file{histograms}} and @ref{@file{histograms/@@Hist}} directories.

@node Continuous-Wave Functions
@section Continuous-Wave Functions

The tutorials in this section illustrate @emph{OctApps} functions specialised to research into continuous gravitational waves.

@menu
* @command{DoFstatInjections()}::                 Tutorial on @command{DoFstatInjections()}, which creates and searches for simulated continuous gravitational-wave signals.
* @command{ComputeDopplerMetric()}::              Tutorial on @command{ComputeDopplerMetric()}, which computes the parameter-space metric for continuous gravitational-wave searches.
* @command{LatticeMismatchHist()}::               Tutorial on @command{LatticeMismatchHist()}, which generates theoretical mismatch histograms.
* @command{SensitivityDepthStackSlide()}::        Tutorial on @command{SensitivityDepthStackSlide()}, which estimates the sensitivity of a continuous gravitational-wave search.
* @command{OptimalSolution4StackSlide_v2()}::     Tutorial on @command{OptimalSolution4StackSlide_v2()}, which finds the optimal setup of a continuous gravitational-wave search.
@end menu

@node @command{DoFstatInjections()}
@subsection @command{DoFstatInjections()}

@command{DoFstatInjections()} creates gravitational-wave data containing a simulated continuous gravitational-wave signal, then searches for them using the F-statistic.

First we define the parameters of the simulated continuous gravitational-wave signal:
@example
octave> Alpha = 3.92;
octave> Delta = 0.83;
octave> Freq = 200;
octave> f1dot = 1e-9;
@end example
We then define some common arguments to @command{DoFstatInjections()} (see the documentation for details):
@example
octave> Tobs = 86400;
octave> DFIargs = @{"ref_time", 731163327, "start_time", 850468953, "time_span", Tobs, "detectors", "H1,L1", "sft_time_span", 1800, "sft_overlap", 0, "sft_noise_window", 50, "inj_h0", 0.55, "inj_cosi", 0.31, "inj_psi", 0.22, "inj_phi0", 1.82, "inj_alpha", Alpha, "inj_delta", Delta, "inj_fndot", [Freq; f1dot], "Dterms", 8, "randSeed", 1234@};
@end example

We perform a simple search over just frequency, all other parameters being perfectly matched:
@example
octave> dFreq = 0.2 / Tobs;
octave> sch_Freq = linspace(Freq - 50*dFreq, Freq + 50*dFreq, 90);
octave> sch_f1dot = f1dot * ones(size(sch_Freq));
octave> sch_fndot = [sch_Freq; sch_f1dot];
octave> sch_Alpha = Alpha * ones(size(sch_Freq));
octave> sch_Delta = Delta * ones(size(sch_Freq));
octave> res = DoFstatInjections(DFIargs@{:@}, "det_sqrt_PSD", 1.0, "OrbitParams", false, "sch_fndot", sch_fndot, "sch_alpha", sch_Alpha, "sch_delta", sch_Delta);
@end example
If none of the @var{sch_...} variables are passed to @command{DoFstatInjections()}, it searches at the exact parameters of the injected signal:
@example
octave> res0 = DoFstatInjections(DFIargs@{:@}, "det_sqrt_PSD", 1.0, "OrbitParams", false);
@end example

Finally, we plot the results:
@example
octave> graphics_toolkit gnuplot
octave> plot(res.sch_fndot(1,:) - Freq, res.sch_twoF, "kx-", res0.sch_fndot(1,:) - Freq, res0.sch_twoF, "ro");
octave> xlabel("Search - Injection Frequency [Hz]");
octave> ylabel("2F");
octave> ezprint("DoFstatInjections-plot-1.png", "width", 180, "fontsize", 6);
@end example
@image{DoFstatInjections-plot-1}

@node @command{ComputeDopplerMetric()}
@subsection @command{ComputeDopplerMetric()}

@command{ComputeDopplerMetric()} computes the parameter-space metric which determines the template resolution of continuous gravitational-wave searches.

We compute the metric in the frequency and spindown parameters:
@example
octave> Alpha = 3.92;
octave> Delta = 0.83;
octave> Freq = 200;
octave> f1dot = 1e-9;
octave> Tobs = 86400;
octave> metric = ComputeDopplerMetric("coords", "freq,fdots", "spindowns", 1, "segment_list", 850468953 + [0,Tobs], "ref_time", 731163327, "fiducial_freq", Freq, "detectors", "H1,L1", "det_motion", "spin+orbit", "alpha", Alpha, "delta", Delta);
octave> metric.g_ij
ans =

   2.4559e+10   2.9311e+18
   2.9311e+18   3.4982e+26

@end example

We can use the metric to generate random frequency and spindown offsets with random metric mismatches:
@example
octave> dx = randPointInNSphere(2, 0.1 * rand(1, 500));
octave> dfndot = inv(chol(metric.g_ij)) * dx;
octave> mu = dot(dfndot, metric.g_ij * dfndot);
octave> [min(mu), max(mu)]
ans =

   1.9605e-04   9.9810e-02

@end example

We can use the generated offsets to compute the F-statistic with @command{DoFstatInjections()} to compute the actual mismatch:
@example
octave> DFIargs = @{"ref_time", 731163327, "start_time", 850468953, "time_span", Tobs, "detectors", "H1,L1", "sft_time_span", 1800, "sft_overlap", 0, "sft_noise_window", 50, "inj_h0", 0.55, "inj_cosi", 0.31, "inj_psi", 0.22, "inj_phi0", 1.82, "inj_alpha", Alpha, "inj_delta", Delta, "inj_fndot", [Freq; f1dot], "Dterms", 8, "randSeed", 1234@};
octave> sch_fndot = [Freq + dfndot(1,:); f1dot + dfndot(2,:)];
octave> sch_Alpha = Alpha * ones(size(sch_fndot(1,:)));
octave> sch_Delta = Delta * ones(size(sch_fndot(1,:)));
octave> res = DoFstatInjections(DFIargs@{:@}, "det_sqrt_PSD", 1.0, "OrbitParams", false, "sch_fndot", sch_fndot, "sch_alpha", sch_Alpha, "sch_delta", sch_Delta);
octave> res0 = DoFstatInjections(DFIargs@{:@}, "det_sqrt_PSD", 1.0, "OrbitParams", false);
octave> sch_mu = (res0.sch_twoF - res.sch_twoF') ./ res0.sch_twoF;
@end example

We can plot the actual F-statistic mismatches as a function of frequency and spindown offsets:
@example
octave> graphics_toolkit gnuplot;
octave> scatter(sch_fndot(1,:) - Freq, sch_fndot(2,:) - f1dot, [], sch_mu);
octave> colorbar;
octave> xlabel("Search - Injection Frequency [Hz]");
octave> ylabel("Search - Injection Spindown [Hz/s]");
octave> set(gca, "position", [0.2, 0.11, 0.55, 0.815]);
octave> ezprint("ComputeDopplerMetric-plot-1.png", "width", 180, "fontsize", 4);
@end example
@image{ComputeDopplerMetric-plot-1}
Due to significant correlations between parameters, it is often better to plot in the @emph{normalised} coordinates @var{dx}:
@example
octave> scatter(dx(1,:), dx(2,:), [], sch_mu);
octave> colorbar;
octave> xlabel("Normalised Coordinate 1");
octave> ylabel("Normalised Coordinate 2");
octave> ezprint("ComputeDopplerMetric-plot-2.png", "width", 180, "fontsize", 4);
@end example
@image{ComputeDopplerMetric-plot-2}

Finally, we can compare F-statistic and metric mismatches:
@example
octave> plot(mu, sch_mu, "bx");
octave> xlabel("Metric Mismatch");
octave> ylabel("F-statistic Mismatch");
octave> set(gca, "position", [0.2, 0.11, 0.705, 0.815]);
octave> ezprint("ComputeDopplerMetric-plot-3.png", "width", 180, "fontsize", 4);
@end example
@image{ComputeDopplerMetric-plot-3}

@node @command{LatticeMismatchHist()}
@subsection @command{LatticeMismatchHist()}

@command{LatticeMismatchHist()} generates theoretical mismatch histograms, assuming a continuous gravitational-wave search grid is constructed using a particular lattice. Common lattices are the @emph{A-n-star} lattices:
@example
octave> Ans2 = LatticeMismatchHist(2, "Ans");
octave> Ans3 = LatticeMismatchHist(3, "Ans");
octave> Ans4 = LatticeMismatchHist(4, "Ans");
@end example
and the @emph{hypercubic} lattices:
@example
octave> Zn2 = LatticeMismatchHist(2, "Zn");
octave> Zn3 = LatticeMismatchHist(3, "Zn");
octave> Zn4 = LatticeMismatchHist(4, "Zn");
@end example
Their mismatch histograms are plotted below:
@example
octave> graphics_toolkit gnuplot;
octave> plotHist(Ans2, "r;A-n-star;", Ans3, "r", Ans4, "r", Zn2, "b;hypercubic;", Zn3, "b", Zn4, "b");
octave> xlabel("Normalised Mismatch");
octave> ylabel("p(Normalised Mismatch)");
octave> ezprint("LatticeMismatchHist-plot-1.png", "width", 180, "fontsize", 6);
@end example
@image{LatticeMismatchHist-plot-1}

@node @command{SensitivityDepthStackSlide()}
@subsection @command{SensitivityDepthStackSlide()}

@command{SensitivityDepthStackSlide()} estimates the sensitivity of a continuous gravitational-wave search.
Given the search parameters:
@example
octave> Nseg = 90;
octave> Tseg = 60 * 3600;
octave> Tdata = 12080 * 1800;
octave> avg2Fth = 6.109;
octave> sum2Fth = Nseg * avg2Fth;
octave> pFA = falseAlarm_chi2(sum2Fth, 4 * Nseg);
octave> misHistSC = createDeltaHist (0.7);
@end example
and the desired false dismissal probability, the search sensitivity is estimated as a @emph{sensitivity depth}:
@example
octave> pDET = [0.95; 0.9; 0.85];
octave> Depths = SensitivityDepthStackSlide("Nseg", Nseg, "Tdata", Tdata, "misHist", misHistSC, "pFD", 1-pDET, "pFA", pFA, "detectors", "H1,L1")
Depths =

   38.683
   41.919
   44.495

@end example
The inverse function @command{DetectionProbabilityStackSlide()} instead computes the detection probabilities from the desired sensitivity depths:
@example
octave> detProbs = DetectionProbabilityStackSlide("Nseg", Nseg, "Tdata", Tdata, "misHist", misHistSC, "pFA", pFA, "detectors", "H1,L1", "Depth", Depths)
detProbs =

   0.95000
   0.90000
   0.85000

@end example

@node @command{OptimalSolution4StackSlide_v2()}
@subsection @command{OptimalSolution4StackSlide_v2()}

@command{OptimalSolution4StackSlide_v2()} finds the optimal setup of a continuous gravitational-wave search, under the constraint of fixed computational cost.

The computational cost of a continuous gravitational-wave search is given by a function; the following example is based on the Einstein@@Home search for Cassiopeia A using LIGO S6 data:
@example
octave> UnitsConstants;
octave> costFuns = CostFunctionsDirected("fmin", 120, "fmax", 1000, "tau_min", 300 * YRSID_SI, "detectors", "H1,L1", "coh_duty", 0.53375, "resampling", false, "coh_c0_demod", 7.4e-8 / 1800, "inc_c0", 4.7e-9, "lattice", "Zn", "boundaryType", "EaHCasA");
octave> cost0 = 3.1451 * EM2014;
octave> TobsMax = 256.49 * DAYS;
@end example
Given a starting guess:
@example
octave> refParams.Nseg = 10;
octave> refParams.Tseg = 24 * 86400;
octave> refParams.mCoh = 0.5;
octave> refParams.mInc = 0.5;
@end example
@command{OptimalSolution4StackSlide_v2()} iteratively converges to the optimal solution under the given constraints:
@example
octave> sol = OptimalSolution4StackSlide_v2("costFuns", costFuns, "cost0", cost0, "TobsMax", TobsMax, "stackparamsGuess", refParams, "debugLevel", 1);
Completing stackparams of starting point ... done: @{Nseg =   10.0, Tseg =   24.00 d, Tobs =  240.00 d, mCoh = 0.5    , mInc = 0.5    @} : dCC0=+1e+01 : L0LIN=+7.01e+06
Running solver [Unconstrained]:   iteration = 07/10 [converged]: @{Nseg =   50.6, Tseg =    5.07 d, Tobs =  256.49 d, mCoh = 0.075  , mInc = 0.52   @} : dCC0=-7e-01 : L0LIN=+3.91e+06 ==> FEASIBLE!
Running solver [TobsMax]:         iteration = 05/10 [converged]: @{Nseg =   32.1, Tseg =    8.00 d, Tobs =  256.49 d, mCoh = 0.12   , mInc = 0.41   @} : dCC0=-4e-03 : L0LIN=+5.19e+06 ==> FEASIBLE!
==============================
--> Best solution found: [TobsMax]: @{Nseg =   32.1, Tseg =    8.00 d, Tobs =  256.49 d, mCoh = 0.12   , mInc = 0.41   @} : dCC0=-4e-03 : L0LIN=+5.19e+06
==============================
@end example
